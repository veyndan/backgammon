@layer reset {
	*, ::before, ::after {
		box-sizing: border-box;
	}

	body {
		margin: 0;
	}
}

@layer typography {
	.typography-body-large-700 {
		font: 700 20px/1 system-ui;
	}

	.typography-body-medium-700 {
		font: 700 18px/1 system-ui;
	}

	.typography-body-small-700 {
		font: 700 12px/1 system-ui;
	}

	.typography-label-large-700 {
		font: 700 14px/1.43 system-ui;
	}

	.typography-label-small-700 {
		font: 700 8px/1 system-ui;
	}

	.typography-label-small-400 {
		font: 400 8px/1 system-ui;
	}
}

@layer palette {
	:root {
		--primary: light-dark(#a0d49b, #39693b);
		--on-primary: light-dark(#ffffff, #083910);
		--secondary: light-dark(#52634f, #b9ccb4);
		--on-secondary: light-dark(#ffffff, #253423);
		--tertiary: light-dark(#39656b, #a1ced4);
		--on-tertiary: light-dark(#ffffff, #00363b);
		--primary-container: light-dark(hsl(115.9 65.9% 82.7%), hsl(121.3 39.1% 22.5%));
		--on-primary-container: light-dark(#002105, #bbf0b5);
		--secondary-container: light-dark(#d5e8cf, #3b4b39);
		--on-secondary-container: light-dark(#101f10, #d5e8cf);
		--tertiary-container: light-dark(#bcebf1, #1f4d52);
		--on-tertiary-container: light-dark(#001f23, #bcebf1);
		--surface-dim: light-dark(#d7dbd3, #10140f);
		--surface: light-dark(hsl(84 55.6% 96.5%), hsl(108 14.3% 6.9%));
		--surface-bright: light-dark(#f7fbf1, #363a34);
		--surface-container-lowest: light-dark(#ffffff, #0b0f0a);
		--surface-container-low: light-dark(#f1f5ec, #181d17);
		--surface-container: light-dark(#ebefe6, #1c211b);
		--surface-container-high: light-dark(#e6e9e0, #272b25);
		--surface-container-highest: light-dark(#e0e4db, #323630);
		--on-surface: light-dark(#181d17, #e0e4db);
		--on-surface-variable: light-dark(#424940, #c2c9bd);
		--outline: light-dark(#72796f, #8c9388);
		--outline-variant: light-dark(#c2c9bd, #424940);
		--inverse-surface: light-dark(#2d322c, #e0e4db);
		--inverse-on-surface: light-dark(#eef2e9, #2d322c);
		--inverse-primary: light-dark(#9fd49c, #3b693a);
		--scrim: light-dark(#000000, #000000);
		--shadow: light-dark(#000000, #000000);
	}

	.surface {
		color: var(--on-surface);
		background: var(--surface);
	}
}

:root {
	--bar-width: 38px;
	--checker-radius: 16px;
	--checker-diameter: calc(var(--checker-radius) * 2);
	--checker-thickness: 5px;
	--checkers-per-player: 15;
	--die-side-length: 36px;
	--half-width: calc(var(--point-width) * 6);
	--half-height: calc(var(--point-height) * 2 + var(--checker-diameter) * 2 + var(--die-side-length) + 24px);
	--hold-width: calc(var(--checker-diameter));
	--point-count: 24;
	--point-per-side: calc(var(--point-count) / 2);
	--point-min: 1;
	--point-max: 24;
	--point-width: var(--checker-diameter);
	--point-height: calc(var(--checker-diameter) * 4);

	color-scheme: light dark;
}

html {
	block-size: 100dvb;
	font: 16px/1.5 system-ui;
}

body {
	display: flex;
	flex-direction: column;
	gap: 8px;

	block-size: 100%;
	padding: 16px;

	& > :not(main) > * {
		margin-inline: auto;
		padding-inline: 1rem;
	}
}

header > nav {
	& > ul {
		display: flex;
		flex-wrap: wrap;
		gap: 1em;

		padding-inline: 0;

		font-weight: bold;
		list-style-type: none;

		& > li:first-child:has(> a[href="/index.html"]) {
			margin-inline-end: auto;
		}
	}

	a {
		&:any-link {
			color: LinkText;
		}

		&[aria-current="page"] {
			color: inherit;
			text-decoration: inherit;
		}
	}
}

button {
	cursor: pointer;

	&:disabled {
		cursor: not-allowed;
	}
}

[data-player="1"] {
	--player-current-checker-background: var(--surface-container-lowest);
	--player-current-checker-text-color: var(--on-surface);
}

[data-player="2"] {
	--player-current-checker-background: var(--on-surface);
	--player-current-checker-text-color: var(--surface-container-lowest);
}

#players {
	display: flex;
	gap: 8px;
	writing-mode: sideways-lr;
}

#timer {
	display: flex;
	gap: 8px;
	align-items: center;

	padding-block: 4px;
	padding-inline: 14px;
	border-radius: 8px;

	writing-mode: sideways-lr;

	background: var(--surface-container-high);

	& > #move {
		color: var(--secondary);
	}
}

#play-mode {
	writing-mode: sideways-rl;
}

main[data-player="1"] #players > veyndan-player[data-player="1"],
main[data-player="2"] #players > veyndan-player[data-player="2"] {
	background: var(--primary-container);
}

main[data-player="2"]:has(#play-mode > select > option[value="opposite"]:checked) > svg > foreignObject > .main > .foreignObject > #controls {
	rotate: .5turn;
}

main:has(#play-mode > select > option[value="side-by-side"]:checked) {
	flex-direction: column;

	#players, #timer, #play-mode {
		writing-mode: unset;
	}

	&[data-player="1"] > svg > foreignObject > .main > .foreignObject > #controls {
		flex-direction: row-reverse;
	}
}

.hold {
	--checker-radius: 14px;
	--checker-diameter: calc(var(--checker-radius) * 2);
	--gap: 1px;
	--padding: 2px;

	display: flex;
	flex-direction: column-reverse;
	gap: var(--gap);
	justify-content: end;

	inline-size: var(--hold-width);
	block-size: calc(var(--checkers-per-player) * var(--checker-thickness) + 2 * var(--padding) + (var(--checkers-per-player) - 1) * var(--gap));
	padding: var(--padding);
	border-radius: 4px;

	background: var(--secondary-container);
}

#doubling-cube-face {
	--die-side-length: 28px;

	rotate: .25turn;

	display: flex;
	align-items: center;
	justify-content: center;

	inline-size: var(--die-side-length);
	block-size: var(--die-side-length);
	border-radius: 4px;

	color: var(--on-secondary-container);

	background: var(--secondary-container);
}

main {
	display: flex;
	align-items: center;
	justify-content: center;
	block-size: calc(100% - 56px);

	& > svg {
		touch-action: none;
		max-block-size: 100%;
		margin-inline: 8px;

		& > foreignObject {
			inline-size: 100%;
			block-size: 100%;

			& > .main {
				overflow: auto;
				display: flex;
				flex:1;
				gap: 8px;
				align-items: center;
				justify-content: center;

				inline-size: calc(70px + 8px + 26px + 16px + 2 * var(--half-width) + var(--bar-width) + 24px + var(--hold-width) + 16px + 26px);
				block-size: calc(var(--half-height) + 40px);

				& > .foreignObject {
					display: grid;
					grid-template-columns: var(--half-width) var(--bar-width) var(--half-width) var(--hold-width);
					grid-template-rows: 20px var(--half-height) 20px;
					column-gap: 8px;

					inline-size: 100%;
					block-size: 100%;
					margin-inline: 8px;

					& > #board {
						display: contents;

						& > .half {
							display: flex;
							grid-row: 2;
							flex-direction: column;
							justify-content: space-between;

							background: var(--primary-container);
							clip-path: fill-box inset(0 round 8px);

							&#outer-board {
								grid-column: 1;
							}

							&#inner-board {
								grid-column: 3;
							}

							& > .quadrant {
								display: flex;

								& > veyndan-point {
									&:nth-child(even) {
										color: hsl(from var(--secondary) h s 50%);
									}

									&:nth-child(odd) {
										color: var(--primary);
									}
								}

								&:last-of-type {
									transform: scale(-1, -1);
								}
							}
						}

						& > .bar {
							grid-column: 2;
							grid-row: 2;
							border-radius: 8px;
							background: var(--secondary-container);
						}

						& > #sidebar {
							display: flex;
							grid-column: 4;
							grid-row: 2;
							flex-direction: column;
							align-items: center;
							justify-content: space-evenly;
						}
					}

					& > #controls {
						z-index: 1;

						display: flex;
						grid-column: 1 / span 3;
						grid-row: 2;
						align-self: center;
						justify-content: space-between;

						& > div {
							display: flex;
							gap: 8px;
							align-items: center;
							justify-content: center;

							inline-size: var(--half-width);
						}
					}

					& > #checkers {
						pointer-events: none;
						grid-column: 1 / span 3;
						grid-row: 2;
					}

					& > #drop-points {
						pointer-events: none;
						grid-column: 1 / span 3;
						grid-row: 1 / -1;
					}
				}
			}
		}
	}
}

/*noinspection CssInvalidFunction*/
.drop-point,
#checkers > *:not([data-hit]) {
	/* Returns 1 if the --point is in [1,12], else 0. */
	--is-bottom-point: calc(1 - var(--is-top-point));
	/* Returns 1 if the --point is in [13,24], else 0. */
	--is-top-point: round(down, calc((var(--point) - 1) / var(--point-per-side)), 1);
	/* Returns 1 if the --point is in [1,6] âˆª [19,24], else 0. */
	--is-right-point: round(down, abs(calc((var(--point-max) + var(--point-min)) / 2) - var(--point)) / 6, 1);
	--translate-x:
		calc(
			var(--is-top-point) * (var(--checker-diameter) * rem(var(--point) - 1, var(--point-per-side)))
			+ var(--is-bottom-point) * (2 * var(--half-width) - var(--checker-diameter) * (rem(var(--point) - 1, var(--point-per-side)) + 1))
			+ var(--is-right-point) * (var(--bar-width) + 16px)
		);
}

/*noinspection CssInvalidFunction*/
.drop-point {
	--drop-point-diameter: 12px;

	position: absolute;
	translate:
		calc(
			var(--translate-x) + (var(--checker-diameter) - var(--drop-point-diameter)) / 2
		)
		calc(
			var(--is-bottom-point) * (var(--half-height) + 28px)
		);

	aspect-ratio: 1;
	block-size: var(--drop-point-diameter);
	border-radius: 50%;

	background: darkorange;
}

/*noinspection CssInvalidFunction*/
#checkers > * {
	pointer-events: auto;

	position: absolute;

	display: flex;
	align-items: center;
	justify-content: center;

	transition: translate .3s;

	&:not([data-permissible-destination-points="[]"]) {
		&:hover {
			cursor: pointer;
		}

		&.dragging {
			cursor: move;
			filter: drop-shadow(2px 4px 4px hsl(from var(--surface) h s l / .3));
			transition: filter .3s;
		}
	}

	&[data-permissible-destination-points="[]"]:hover {
		cursor: not-allowed;
	}

	& > text {
		user-select: none;
		dominant-baseline: central;
		text-anchor: middle;
		fill: currentColor;

		/* Hide node from accessibility tree when empty. */
		&:empty {
			display: none;
		}
	}

	&[data-hit] {
		translate: calc(var(--half-width) + 8px + (var(--bar-width) - var(--checker-diameter)) / 2) var(--translate-y);

		&[data-player="1"] {
			--translate-y: calc(var(--checker-diameter) * 2.5);
		}

		&[data-player="2"] {
			--translate-y: calc(var(--half-height) - var(--checker-diameter) * 3.5);
		}
	}

	&:not([data-hit]) {
		--top-point-translate-y: calc(var(--checker-diameter) * min(var(--point-stack-index), ((5 - 1) * var(--point-stack-index)) / max(var(--point-stack-count) - 1, 1)));
		--bottom-point-translate-y: calc((var(--half-height) - var(--top-point-translate-y) - var(--checker-diameter)));

		--top-point-mask-position-vertical: calc(150% + -1 * round(down, calc(var(--point-stack-count) / 6), 1) * (1 - round(down, calc((var(--point-stack-index) + 1) / var(--point-stack-count)), 1)) * (105% - ((4 / max(var(--point-stack-count) - 1, 1)) * 100%)));
		--bottom-point-mask-position-vertical: calc(100% - var(--top-point-mask-position-vertical));

		translate:
			var(--translate-x)
			calc(
				var(--is-top-point) * var(--top-point-translate-y)
				+ var(--is-bottom-point) * var(--bottom-point-translate-y)
			);

		mask-composite: subtract;
		mask-image:
			radial-gradient(
				black var(--checker-radius),
				transparent var(--checker-radius)
			),
			radial-gradient(
				circle at center calc(var(--is-top-point) * var(--top-point-mask-position-vertical) + var(--is-bottom-point) * var(--bottom-point-mask-position-vertical)),
				black var(--checker-radius),
				transparent var(--checker-radius)
			);
	}
}

#controls button {
	--surface: var(--player-current-checker-background);
	--color: var(--player-current-checker-text-color);
	--alpha: 1;

	padding-block: 10.5px;
	padding-inline: 21px;
	border: none;
	border-radius: 8px;

	color: hsl(from var(--color) h s l / var(--alpha));

	background: hsl(from var(--surface) h s l / var(--alpha));

	&:disabled {
		--alpha: .5;
	}

	&:hover:not(:disabled) {
		--alpha: .85;
	}

	&#confirm {
		--surface: hsl(149 83% 28%);
		--color: hsl(0 0% 100%);
	}
}

#dice-container {
	display: none;
	flex-direction: column;
	align-items: center;

	inline-size: 100%;
	margin-block-end: 16px;

	#dice-swap {
		block-size: 12px;
		margin-block: -1px;
		visibility: hidden;
	}

	&:has(#dice :not(.rolling):first-child:nth-last-child(2)) {
		cursor: pointer;

		#dice-swap {
			visibility: visible;
		}
	}
}

#dice {
	display: flex;
	justify-content: center;

	margin: 0;
	padding: 0;

	list-style-type: none;

	veyndan-die {
		overflow: hidden;
		flex: 0 1 calc(var(--die-side-length) + 14px);
		margin-inline: -2px;

		&:nth-child(n + 3) {
			animation: .5s .2s backwards flex-grow,
				.2s .8125s backwards fade-in;
		}
	}
}

@keyframes fade-in {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

@keyframes flex-grow {
	from {
		flex: 0;
		margin-inline: 0;
	}
	to {
		flex: 0 1 calc(var(--die-side-length) + 14px);
	}
}
